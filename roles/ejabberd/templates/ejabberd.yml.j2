###
###              ejabberd configuration file
###
### The parameters used in this configuration file are explained at
###
###       https://docs.ejabberd.im/admin/configuration
###
### The configuration file is written in YAML.
### *******************************************************
### *******           !!! WARNING !!!               *******
### *******     YAML IS INDENTATION SENSITIVE       *******
### ******* MAKE SURE YOU INDENT SECTIONS CORRECTLY *******
### *******************************************************
### Refer to http://en.wikipedia.org/wiki/YAML for the brief description.
###


# loglevel: Verbosity of log files generated by ejabberd
loglevel: info

# rotation: Disable ejabberd's internal log rotation, as the Debian package
# uses logrotate(8).
log_rotate_count: 0

# hosts: Domains served by ejabberd.
# You can define one or several, for example:
# hosts:
#   - "example.net"
#   - "example.com"
#   - "example.org"

hosts:
  - localhost
{% for domain in domains %}
  - {{ domain }}
{% endfor %}

certfiles:
  - "/etc/ejabberd/localhost.pem"
{% for domain in domains %}
  - /etc/letsencrypt/live/{{ domain }}/fullchain.pem
  - /etc/letsencrypt/live/{{ domain }}/privkey.pem
{% endfor %}

# TLS configuration
define_macro:
  'TLS_CIPHERS': "HIGH:!aNULL:!eNULL:!3DES:@STRENGTH"
  'TLS_OPTIONS':
    - "no_sslv3"
    # - "no_tlsv1" # old windows gloox only supports TLS v1.0. Can be removed once a26 and older versions aren't supported anymore
    - "no_tlsv1_1"
    - "no_tlsv1_3"  # gloox 1.0.25 & 1.0.26 have TLS v1.3 enabled, but 0ad fails to connect when TLS v1.3 is enabled on server side
    - "cipher_server_preference"
    - "no_compression"
    # 'DH_FILE': "/path/to/dhparams.pem"
    # generated with: openssl dhparam -out dhparams.pem 2048

c2s_ciphers: 'TLS_CIPHERS'
s2s_ciphers: 'TLS_CIPHERS'
c2s_protocol_options: 'TLS_OPTIONS'
s2s_protocol_options: 'TLS_OPTIONS'
# c2s_dhfile: 'DH_FILE'
# s2s_dhfile: 'DH_FILE'

listen:
  -
    port: 5222
    ip: "0.0.0.0"
    module: ejabberd_c2s
    max_stanza_size: 1048576
    shaper: c2s_shaper
    access: c2s
    starttls: true
    starttls_required: false
    protocol_options: 'TLS_OPTIONS'
#  -
#    port: 5223
#    ip: "::"
#    module: ejabberd_c2s
#    max_stanza_size: 262144
#    shaper: c2s_shaper
#    access: c2s
#    tls: true
#    protocol_options: 'TLS_OPTIONS'
#  -
#    port: 5269
#    ip: "::"
#    module: ejabberd_s2s_in
#    max_stanza_size: 524288
#  -
#    port: 5443
#    ip: "::"
#    module: ejabberd_http
#    tls: true
#    protocol_options: 'TLS_OPTIONS'
#    request_handlers:
#      /api: mod_http_api
#      /bosh: mod_bosh
#      ## /captcha: ejabberd_captcha
#      ## /upload: mod_http_upload
#      /ws: ejabberd_http_ws
  -
    port: 5280
    ip: "127.0.0.1"
    module: ejabberd_http
    tls: true
    protocol_options: 'TLS_OPTIONS'
    request_handlers:
      /admin: ejabberd_web_admin
#      /.well-known/acme-challenge: ejabberd_acme
  -
    port: 3478
    transport: udp
    module: ejabberd_stun
#    ip: "0.0.0.0"
#    use_turn: true
#    ## The server's public IPv4 address:
#    # turn_ipv4_address: "203.0.113.3"
#    ## The server's public IPv6 address:
#    # turn_ipv6_address: "2001:db8::3"
#  -
#    port: 1883
#    ip: "::"
#    module: mod_mqtt
#    backlog: 1000

acme:
  auto: false

## Disabling digest-md5 SASL authentication. digest-md5 requires plain-text
## password storage (see auth_password_format option).
disable_sasl_mechanisms:
  - "PLAIN"
  - "DIGEST-MD5"
  - "X-OAUTH2"

s2s_use_starttls: required

## Store the plain passwords or hashed for SCRAM:
auth_password_format: scram

## Full path to a script that generates the image.
## captcha_cmd: "/usr/share/ejabberd/captcha.sh"

acl:
  admin:
    user:
      {% for jid in ejabberd_admins %}
      - "{{ jid }}"
      {% endfor %}

  muc_admins:
    user:
      {% for jid in ejabberd_muc_admins %}
      - "{{ jid }}"
      {% endfor %}
      {% for bot in bots | selectattr('type', 'equalto', 'moderation') %}
      - "{{ bot.jid }}"
      {% endfor %}

  bots:
    user:
      {% for jid in bots | map(attribute="jid") | unique %}
      - "{{ jid }}"
      {% endfor %}

  ipbots:
    user:
      {% for bot in bots | selectattr('type', 'equalto', 'xpartamupp') %}
      - "{{ bot.jid }}"
      {% endfor %}

  # Keep player names short and easily typeable for everyone
  validname:
    user_regexp: "^[0-9A-Za-z._-]{1,20}$"

  local:
    user_regexp: ""
  loopback:
    ip:
      - 127.0.0.0/8
      - ::1/128

access_rules:
  local:
    allow: local
  c2s:
    deny: blocked
    allow: all
  announce:
    allow: admin
  configure:
    allow: admin
  ## Expected by the ipstamp module for XpartaMuPP
  ipbots:
    - allow: ipbots
  muc_admin:
    - allow: admin
    - allow: muc_admins
  pubsub_createnode:
    - allow: admin
    - allow: bots
  register:
    - deny: blocked
    - allow: validname
  trusted_network:
    allow: loopback
  s2s:
    - deny

s2s_access: s2s

api_permissions:
  "console commands":
    from:
      - ejabberd_ctl
    who: all
    what: "*"
  "admin access":
    who:
      access:
        allow:
          - acl: loopback
          - acl: admin
      oauth:
        scope: "ejabberd:admin"
        access:
          allow:
            - acl: loopback
            - acl: admin
    what:
      - "*"
      - "!stop"
      - "!start"
  "public commands":
    who:
      ip: 127.0.0.1/8
    what:
      - status
      - connected_users_number

registration_timeout: 600

shaper:
  normal:
    rate: 1000
    burst_size: 20000
  fast: 200000

shaper_rules:
  max_user_sessions: 10
  max_user_offline_messages:
    5000: admin
    100: all
  c2s_shaper:
    - none: admin
    - none: bots
    - normal
  s2s_shaper: fast

install_contrib_modules:
  - mod_ipstamp

modules:
  mod_adhoc: {}
  mod_admin_extra: {}
  mod_announce:
    access: announce
#  mod_avatar: {}
  mod_blocking: {}
#  mod_bosh: {}
  mod_caps: {}
  mod_carboncopy: {}
  mod_client_state: {}
  mod_configure: {}
  ## mod_delegation: {}   # for xep0356
  mod_disco: {}
#  mod_fail2ban: {}
#  mod_http_api: {}
  ## mod_http_upload:
  ##   put_url: https://@HOST@:5443/upload
  ##   custom_headers:
  ##     "Access-Control-Allow-Origin": "https://@HOST@"
  ##     "Access-Control-Allow-Methods": "GET,HEAD,PUT,OPTIONS"
  ##     "Access-Control-Allow-Headers": "Content-Type"
  ## ipstamp module used by XpartaMuPP to insert IP addresses into the gamelist
  mod_ipstamp: {}
  mod_last: {}
  ## mod_mam:
  ##   ## Mnesia is limited to 2GB, better to use an SQL backend
  ##   ## For small servers SQLite is a good fit and is very easy
  ##   ## to configure. Uncomment this when you have SQL configured:
  ##   ## db_type: sql
  ##   assume_mam_usage: true
  ##   default: always
#  mod_mqtt: {}
  mod_muc:
    access:
      - allow
    access_admin: muc_admin
    access_create: muc_admin
    access_persistent: muc_admin
    access_mam:
      - allow
    default_room_options:
      allow_change_subj: false
      allow_private_messages_from_visitors: nobody
      anonymous: false
      lang: en
      logging: true
      mam: false
      max_users: 1000
      persistent: true
  mod_muc_admin: {}
  mod_muc_log:
    outdir: "/var/log/ejabberd/muc"
    dirtype: plain
    file_format: plaintext
    timezone: universal
  mod_offline:
    access_max_user_messages: max_user_offline_messages
  mod_ping:
    send_pings: true
#  mod_pres_counter:
#    count: 5
#    interval: 60
  mod_privacy: {}
  mod_private: {}
  ## mod_proxy65:
  ##   access: local
  ##   max_connections: 5
  mod_pubsub:
    access_createnode: pubsub_createnode
    plugins:
      - flat
      - pep
    force_node_config:
      "eu.siacs.conversations.axolotl.*":
        access_model: open
      ## Avoid buggy clients to make their bookmarks public
      storage:bookmarks:
        access_model: whitelist
  mod_push: {}
  mod_push_keepalive: {}
  mod_register:
  ##   ## Only accept registration requests from the "trusted"
  ##   ## network (see access_rules section above).
  ##   ## Think twice before enabling registration from any
  ##   ## address. See the Jabber SPAM Manifesto for details:
  ##   ## https://github.com/ge0rg/jabber-spam-fighting-manifesto
  ##   ip_access: trusted_network
    access: register
  mod_roster:
    versioning: true
#  mod_s2s_dialback: {}
#  mod_shared_roster: {}
#  mod_sic: {}
  mod_stream_mgmt:
    resend_on_timeout: if_offline
#  mod_stun_disco: {}
#  mod_vcard:
#    search: false
#  mod_vcard_xupdate: {}
  mod_version: {}

### Local Variables:
### mode: yaml
### End:
### vim: set filetype=yaml tabstop=8
